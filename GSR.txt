function e=Schmidt(V)
large=size(V);
colums=large(1,1);
row=large(1,2);
sum=0;
for i=2:row
b(:,1)=V(:,1);
e(:,1)=b(:,1)/norm(b(:,1));
for j=1:i-1
e(:,j)=b(:,j)/norm(b(:,j));
matdot(:,j)=dot(V(:,i),e(:,j))*e(:,j);
sum=sum+matdot(:,j);
end
b(:,i)=V(:,i)-sum;
e(:,i)=b(:,i)/norm(b(:,i));
end
%例如运行：
V=[1,2,2;2,1,2;2,2,1]
V =
1 2 2
2 1 2
2 2 1
e=Schmidt(V)
e =
0.3333 0.8085 -0.1026
0.6667 -0.5659 -0.4061
0.6667 0.1617 -0.9081

Ref Link:
http://zhidao.baidu.com/link?url=mQpxFNAXOQ-91vPyGdVMTc8sZ57UonlmJmRaiETpJVAP3ADR6kC5186SdQqVJlqF60-8DayZT-WeDq0o0ybm5IPBAAHoummqCgksWZmhAY_

function [v] = GS(A)
v(:,1)=A(:,1)/norm(A(:,1))
Num=0;%迭代步数
[Ahang,Alie]=size(A)  %矩阵的行和列
for j=2:Alie
    for i=1:j-1
        sum(:,1)=zeros(1,Ahang); %临时变量 存储后面的求和
        for k=1:j-1
            %disp('---A----')
            %disp(A(:,j));
            %disp(v(:,k));
            h(k,j)=A(:,j)'*v(:,k);
            %disp(sum(:,1))
            %disp(k)
            %disp(j)
            %disp(h(k,j))
            %disp(v(:,k))
            sum(:,1) =sum(:,1)+h(k,j)*v(:,k);
            Num=Num+1;
        end
        v(:,j)=A(:,j)-sum(:,1);
        v(:,j)=v(:,j)/norm(v(:,j));
    end
end
disp('Num=');disp(Num)
%上述某些冗余行，主要方便调试

function [v] = GS(A)
v(:,1)=A(:,1)/norm(A(:,1))
Num=0;%迭代步数
[Ahang,Alie]=size(A)  %矩阵的行和列
for j=2:Alie
    sum(:,1)=zeros(1,Ahang); %临时变量 存储后面的求和
    for i=1:j-1
        h(i,j)=A(:,j)'*v(:,i);
         sum(:,1) =sum(:,1)+h(i,j)*v(:,i);
            Num=Num+1;
    end
    v(:,j)=A(:,j)-sum(:,1);
    v(:,j)=v(:,j)/norm(v(:,j));
end
disp('Num=');disp(Num)

Ref Link:
http://www.cnblogs.com/kmliang/archive/2012/09/07/2675669.html
